<?php
/**
 *             ЛЕГКОВЕС
 * ---------------------------------
 * Структурный шаблон проектирования
 *
 * Предназначен для экономии памяти, когда большое количество одинаковых объектов или даных используется в разных местах.
 * Цель - собрать общие для всех объектов части в одной части и передавать их в нужные места через аргументы.
 *
 */

// ==================================================================
// Структура
// ==================================================================

// ==================================================================
// ======= Класс букв
// ==================================================================

class Character
{
    public $name;

    public function __construct($name)
    {
        $this->name = $name;
    }

    public function display($size)
    {
        return $this->name . ' with size is' . $size;
    }
}

// ==================================================================
// ======= Класс легковеса (собирает только уникальные объекты и работает с ними)
// ==================================================================

class FlyweightFactory
{
    public $stack = [];

    public function getCharacter($name)
    {
        if(!array_key_exists($name, $this->stack)){
            $this->stack[$name] = new Character($name);
        }
        return $this->stack[$name];
    }
}

// ==================================================================
// Тесты
// ==================================================================

$factory = new FlyweightFactory();
$string = 'AaaaaAvgFc';
echo $string . '<hr/>';
foreach (str_split($string) as $item) {
    echo $factory->getCharacter($item)->display(rand(1,10)) . '<hr/>';
}

echo 'Factory have only - '.count($factory->stack).' objects. <hr/> String have '. strlen($string) . ' characters';

